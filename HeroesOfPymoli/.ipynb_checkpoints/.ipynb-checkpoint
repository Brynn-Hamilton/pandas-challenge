{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Heroes of Pymoli"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import dependencies\n",
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "# File to load\n",
    "csvpath = \"..\\\\Resources\\\\purchase_data.csv\"\n",
    "\n",
    "# Read CSV and store into Pandas dataframe \n",
    "heroes_of_pymoli = pd.read_csv(csvpath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Purchase ID</th>\n",
       "      <th>SN</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Item ID</th>\n",
       "      <th>Item Name</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Lisim78</td>\n",
       "      <td>20</td>\n",
       "      <td>Male</td>\n",
       "      <td>108</td>\n",
       "      <td>Extraction, Quickblade Of Trembling Hands</td>\n",
       "      <td>3.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Lisovynya38</td>\n",
       "      <td>40</td>\n",
       "      <td>Male</td>\n",
       "      <td>143</td>\n",
       "      <td>Frenzied Scimitar</td>\n",
       "      <td>1.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Ithergue48</td>\n",
       "      <td>24</td>\n",
       "      <td>Male</td>\n",
       "      <td>92</td>\n",
       "      <td>Final Critic</td>\n",
       "      <td>4.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Chamassasya86</td>\n",
       "      <td>24</td>\n",
       "      <td>Male</td>\n",
       "      <td>100</td>\n",
       "      <td>Blindscythe</td>\n",
       "      <td>3.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Iskosia90</td>\n",
       "      <td>23</td>\n",
       "      <td>Male</td>\n",
       "      <td>131</td>\n",
       "      <td>Fury</td>\n",
       "      <td>1.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Purchase ID             SN  Age Gender  Item ID  \\\n",
       "0            0        Lisim78   20   Male      108   \n",
       "1            1    Lisovynya38   40   Male      143   \n",
       "2            2     Ithergue48   24   Male       92   \n",
       "3            3  Chamassasya86   24   Male      100   \n",
       "4            4      Iskosia90   23   Male      131   \n",
       "\n",
       "                                   Item Name  Price  \n",
       "0  Extraction, Quickblade Of Trembling Hands   3.53  \n",
       "1                          Frenzied Scimitar   1.56  \n",
       "2                               Final Critic   4.88  \n",
       "3                                Blindscythe   3.27  \n",
       "4                                       Fury   1.44  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display dataframe\n",
    "heroes_of_pymoli_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Player Count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total Players</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>576</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Total Players\n",
       "0            576"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the total number of players\n",
    "total_players = len(heroes_of_pymoli_df['SN'].value_counts())\n",
    "display_total_players = pd.DataFrame({\"Total Players\": total_players}, index=[0])\n",
    "display_total_players"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Purchasing Analysis (Total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of Unique Items</th>\n",
       "      <th>Average Price</th>\n",
       "      <th>Number of Purchases</th>\n",
       "      <th>Total Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>179</td>\n",
       "      <td>$3.05</td>\n",
       "      <td>780</td>\n",
       "      <td>$2,379.77</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number of Unique Items Average Price  Number of Purchases Total Revenue\n",
       "0                     179         $3.05                  780     $2,379.77"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Purchasing anaylsis\n",
    "\n",
    "# Total number of unique items\n",
    "total_items = len(heroes_of_pymoli_df['Item ID'].value_counts())\n",
    "\n",
    "# Average price of items\n",
    "average_price = heroes_of_pymoli_df['Price'].mean()\n",
    "\n",
    "# Number of Purchases\n",
    "number_of_purchases = len(heroes_of_pymoli_df['Item ID'])\n",
    "\n",
    "# Total revenue\n",
    "total_revenue = heroes_of_pymoli_df['Price'].sum()\n",
    "\n",
    "# Summary dataframe\n",
    "purchasing_anaylsis_total = pd.DataFrame({\n",
    "    \"Number of Unique Items\": [total_items], \n",
    "    \"Average Price\": [average_price], \n",
    "    \"Number of Purchases\": [number_of_purchases], \n",
    "    \"Total Revenue\": [total_revenue]})\n",
    "\n",
    "# Clean/format totals\n",
    "purchasing_anaylsis_total['Average Price'] = purchasing_anaylsis_total['Average Price'].map('${0:,.2f}'.format)\n",
    "purchasing_anaylsis_total['Total Revenue'] = purchasing_anaylsis_total['Total Revenue'].map('${0:,.2f}'.format)\n",
    "\n",
    "# Display\n",
    "purchasing_anaylsis_total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gender Demographics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-57-dd3c69988af2>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-57-dd3c69988af2>\"\u001b[1;36m, line \u001b[1;32m3\u001b[0m\n\u001b[1;33m    male_player_percentage = (total_male_players / total_players) * 100\u001b[0m\n\u001b[1;37m                         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Percentage and count of male players\n",
    "total_male_players = len(heroes_of_pymoli_df['Gender'].counts()['Male']  \n",
    "male_player_percentage = (total_male_players / total_players) * 100  \n",
    "                         \n",
    "# Percentage and count of female players\n",
    "total_female_players = len(heroes_of_pymoli_df['Gender'].counts()['Female'] \n",
    "female_player_percentage = (total_female_players / total_players) * 100 \n",
    "                           \n",
    "# Percentage and count of other/non-disclosed\n",
    "total_other_players = total_players - total_female_players - total_male_players\n",
    "other_player_percentage = (total_other_players / total_players) * 100    \n",
    "\n",
    "# Summary dataframe\n",
    "gender_demographics = pd.DataFrame({\n",
    "    \"Gender\":[\"Male\", \"Female\", \"Other/Non-Disclosed\"],\n",
    "    \"Total Count\": [total_male_players, total_female_players, total_other_players],\n",
    "    \"Percentage of Players\": [male_player_percentage, female_player_percentage, other_player_percentage]\n",
    "})\n",
    "\n",
    "# Clean/format totals\n",
    "gender_demographics['Percentage of Players'] = gender_demographics['Percentage of Players'].map(\"{:.2f}%\".format)\n",
    "                           \n",
    "# Display\n",
    "gender_demographics                          "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Purchasing Analysis (Gender)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-59-94041f004afa>, line 20)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-59-94041f004afa>\"\u001b[1;36m, line \u001b[1;32m20\u001b[0m\n\u001b[1;33m    })\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Group by gender\n",
    "gender = heroes_of_pymoli.groupby(['Gender'])\n",
    "\n",
    "# Calculate purchase count per gender\n",
    "gender_purchase_count = gender['SN'].count()\n",
    "\n",
    "# Calculate average purchase price per gender\n",
    "gender_average_purchase_price = gender['Price'].mean()\n",
    "\n",
    "# Calculate puchase total per gender\n",
    "gender_purchase_total = gender['Price'].sum()\n",
    "final_purchase_total = gender_purchase_total / gender_purchase_count\n",
    "\n",
    "# Summary dataframe\n",
    "purchasing_analysis_gender = pd.DataFrame({\n",
    "    \"Purchase Count\": [gender_purchase_count], \n",
    "    \"Average Purchase Price\": [gender_average_purchase_price],\n",
    "    \"Total Purchase Value\": [gender_purchase_total],\n",
    "    \"Avg Total Purchase per Person\"\n",
    "})\n",
    "# Clean/format totals\n",
    "purchasing_analysis_gender[\"Average Purchase Price\"] = purchasing_analysis_gender[\"Average Purchase Price\"].map(\"${:.2f}\".format)\n",
    "\n",
    "# Display\n",
    "purchasing_analysis_gender"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Age Demographics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Establish bins for ages\n",
    "# Categorize existing players using age bins\n",
    "# Calculate the numbers and percentages by age group\n",
    "# Summary dataframe\n",
    "# Clean/format totals\n",
    "# Display"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Purchasing Analysis (Age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bin the purchase_data dataframe by age\n",
    "# Calculate purchase count per person\n",
    "# Calculate average purchase price per person\n",
    "# Calculate average purchase total per person\n",
    "# Summary dataframe\n",
    "# Clean/format totals\n",
    "# Display"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Top Spenders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate purchase count by SN\n",
    "# Calculate average purchase price by SN\n",
    "# Calculate total purchase value by SN\n",
    "# Summary dataframe\n",
    "# Clean/format totals\n",
    "# Display"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Most Popular Items"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieve the Item ID, Item Name, and Item Price\n",
    "# Group by Item ID and Item Name\n",
    "# Calculate purchase count, item price, and total purchase value\n",
    "# Summary dataframe\n",
    "# Sort purchase count in descending order\n",
    "# Clean/format totals\n",
    "# Display"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Most Profitable Items"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort previous dataframe/table by total purchase in descending order\n",
    "# Clean/format totals\n",
    "# Display"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
